mkdir -p backend/src/db

cat > backend/src/db/database.js <<'EOF'
// backend/src/db/database.js
const sqlite3 = require('sqlite3').verbose();
const path = require('path');
const bcrypt = require('bcryptjs');

// Usa DB_PATH si est√° definido (Cloud Run: persistente solo en /tmp)
const dbPath = process.env.DB_PATH
  ? path.resolve(process.env.DB_PATH)
  : path.resolve(__dirname, 'taller_rcv.db');

let db;

function run(db, sql, params = []) {
  return new Promise((resolve, reject) => {
    db.run(sql, params, function (err) {
      if (err) return reject(err);
      resolve(this);
    });
  });
}
function get(db, sql, params = []) {
  return new Promise((resolve, reject) => {
    db.get(sql, params, (err, row) => {
      if (err) return reject(err);
      resolve(row);
    });
  });
}

async function ensureSchema() {
  await run(db, 'PRAGMA foreign_keys = ON;');

  await run(db, `CREATE TABLE IF NOT EXISTS usuarios (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    usuario TEXT UNIQUE,
    nombre TEXT,
    rol TEXT,
    estado TEXT DEFAULT 'activo',
    forzarCambio INTEGER DEFAULT 0,
    permisos TEXT DEFAULT '[]',
    password TEXT,
    ultimoAcceso TEXT
  )`);

  await run(db, `CREATE TABLE IF NOT EXISTS bitacora (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    fecha TEXT,
    accion TEXT,
    usuarioAfectado TEXT,
    hechoPor TEXT,
    detalles TEXT
  )`);

  await run(db, `CREATE TABLE IF NOT EXISTS clientes (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    nombre TEXT NOT NULL,
    identificacion TEXT,
    telefono TEXT,
    email TEXT,
    direccion TEXT,
    ciudad TEXT,
    notas TEXT,
    estado TEXT DEFAULT 'activo',
    fechaRegistro TEXT,
    actualizado TEXT
  )`);

  await run(db, `CREATE TABLE IF NOT EXISTS secciones_servicio (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    nombre TEXT NOT NULL UNIQUE
  )`);
  await run(db, `CREATE TABLE IF NOT EXISTS areas_vehiculo (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    nombre TEXT NOT NULL UNIQUE
  )`);
  await run(db, `CREATE TABLE IF NOT EXISTS catalogo (
    id            INTEGER PRIMARY KEY AUTOINCREMENT,
    sku           TEXT UNIQUE,
    nombre        TEXT NOT NULL UNIQUE,
    tipo          TEXT NOT NULL CHECK (tipo IN ('servicio','repuesto')),
    seccion_id    INTEGER,
    area_id       INTEGER,
    categoria     TEXT,
    unidad        TEXT DEFAULT 'unidad',
    precio_base   REAL NOT NULL CHECK(precio_base >= 0),
    impuesto_pct  REAL DEFAULT 0 CHECK(impuesto_pct >= 0),
    activo        INTEGER DEFAULT 1,
    FOREIGN KEY (seccion_id) REFERENCES secciones_servicio(id) ON DELETE SET NULL,
    FOREIGN KEY (area_id)     REFERENCES areas_vehiculo(id)     ON DELETE SET NULL
  )`);
  await run(db, `CREATE TABLE IF NOT EXISTS catalogo_precios (
    id            INTEGER PRIMARY KEY AUTOINCREMENT,
    catalogo_id   INTEGER NOT NULL,
    precio        REAL NOT NULL CHECK(precio >= 0),
    vigente_desde TEXT NOT NULL DEFAULT (datetime('now')),
    FOREIGN KEY (catalogo_id) REFERENCES catalogo(id) ON DELETE CASCADE
  )`);

  await run(db, `INSERT OR IGNORE INTO secciones_servicio (nombre) VALUES
    ('Motor'), ('Transmisi√≥n'), ('Frenos'), ('El√©ctrico'), ('Aire acondicionado'), ('Enfriamiento')`);
  await run(db, `INSERT OR IGNORE INTO areas_vehiculo (nombre) VALUES
    ('Suspensi√≥n'), ('Direcci√≥n'), ('Carrocer√≠a'), ('Escape'), ('Frenos'), ('Ruedas')`);

  await run(db, `CREATE TABLE IF NOT EXISTS cai_autorizaciones (
    id               INTEGER PRIMARY KEY AUTOINCREMENT,
    cai              TEXT    NOT NULL,
    documento_tipo   TEXT    NOT NULL,
    establecimiento  TEXT    NOT NULL,
    punto_emision    TEXT    NOT NULL,
    tipo_doc         TEXT    NOT NULL,
    rango_inicio     INTEGER NOT NULL,
    rango_fin        INTEGER NOT NULL,
    fecha_limite     TEXT    NOT NULL,
    estado           TEXT    NOT NULL DEFAULT 'vigente',
    resolucion       TEXT,
    UNIQUE(cai, documento_tipo, establecimiento, punto_emision, tipo_doc)
  )`);
  await run(db, `CREATE INDEX IF NOT EXISTS idx_cai_aut_vig ON cai_autorizaciones(estado, fecha_limite)`);

  await run(db, `CREATE TABLE IF NOT EXISTS documentos (
    id                 INTEGER PRIMARY KEY AUTOINCREMENT,
    tipo               TEXT    NOT NULL,
    cai_id             INTEGER NOT NULL,
    secuencia          INTEGER NOT NULL,
    correlativo        TEXT    NOT NULL,
    fecha_emision      TEXT    NOT NULL,
    lugar_emision      TEXT,
    moneda             TEXT    NOT NULL DEFAULT 'HNL',
    emisor_rtn         TEXT    NOT NULL,
    emisor_nombre      TEXT    NOT NULL,
    emisor_domicilio   TEXT,
    cliente_rtn        TEXT,
    cliente_nombre     TEXT,
    subtotal_gravado   REAL    NOT NULL DEFAULT 0,
    subtotal_exento    REAL    NOT NULL DEFAULT 0,
    isv_15             REAL    NOT NULL DEFAULT 0,
    isv_18             REAL    NOT NULL DEFAULT 0,
    descuento_total    REAL    NOT NULL DEFAULT 0,
    total              REAL    NOT NULL DEFAULT 0,
    total_letras       TEXT,
    destino            TEXT,
    estado             TEXT    NOT NULL DEFAULT 'emitido',
    created_at         TEXT    NOT NULL DEFAULT (datetime('now','localtime')),
    FOREIGN KEY (cai_id) REFERENCES cai_autorizaciones(id) ON DELETE RESTRICT,
    UNIQUE(cai_id, secuencia),
    UNIQUE(correlativo)
  )`);
  await run(db, `CREATE INDEX IF NOT EXISTS idx_documentos_cai ON documentos(cai_id)`);
  await run(db, `CREATE INDEX IF NOT EXISTS idx_documentos_estado ON documentos(estado)`);

  await run(db, `CREATE TABLE IF NOT EXISTS documento_items (
    id               INTEGER PRIMARY KEY AUTOINCREMENT,
    documento_id     INTEGER NOT NULL,
    descripcion      TEXT    NOT NULL,
    cantidad         REAL    NOT NULL,
    precio_unitario  REAL    NOT NULL,
    descuento        REAL    NOT NULL DEFAULT 0,
    tarifa_isv       INTEGER NOT NULL,
    base_imponible   REAL    NOT NULL DEFAULT 0,
    impuesto         REAL    NOT NULL DEFAULT 0,
    total_linea      REAL    NOT NULL DEFAULT 0,
    FOREIGN KEY (documento_id) REFERENCES documentos(id) ON DELETE CASCADE
  )`);
  await run(db, `CREATE INDEX IF NOT EXISTS idx_items_doc ON documento_items(documento_id)`);
}

async function ensureAdmin() {
  const username = process.env.ADMIN_USER || 'admin';
  const password = process.env.ADMIN_PASS || 'admin123';
  const force = String(process.env.FORCE_ADMIN_RESET || '0') === '1';

  const row = await get(db, `SELECT id FROM usuarios WHERE lower(usuario)=lower(?)`, [username]);
  if (!row) {
    const hash = bcrypt.hashSync(password, 10);
    await run(db, `INSERT INTO usuarios (usuario, nombre, rol, estado, forzarCambio, permisos, password, ultimoAcceso)
                   VALUES (?, ?, ?, ?, ?, ?, ?, ?)`,
      [username, 'Administrador', 'administrador', 'activo', 0,
       JSON.stringify(['usuarios.admin','bitacora.view']), hash, null]);
    console.log(`‚úÖ Usuario ${username} creado (${username}/${password})`);
  } else if (force) {
    const hash = bcrypt.hashSync(password, 10);
    await run(db, `UPDATE usuarios SET password=?, forzarCambio=0, estado='activo' WHERE id=?`, [hash, row.id]);
    console.log(`üîê Password de ${username} reseteado (FORCE_ADMIN_RESET=1)`);
  } else {
    console.log(`‚ÑπÔ∏è Usuario ${username} ya existe (sin cambios)`);
  }
}

function initDB() {
  return new Promise((resolve) => {
    db = new sqlite3.Database(dbPath, async (err) => {
      if (err) {
        console.error('‚ùå Error al conectar DB:', err.message);
        return resolve();
      }
      console.log('‚úÖ Conectado a SQLite:', dbPath);
      try {
        await ensureSchema();
        await ensureAdmin();
      } catch (e) {
        console.error('‚ùå Error en migraci√≥n/semilla:', e.message);
      }
      resolve();
    });
  });
}

function getDB() {
  if (!db) throw new Error('DB no inicializada. Llama initDB() primero.');
  return db;
}

module.exports = { initDB, getDB };
EOF

# Verifica que ahora s√≠ est√°:
grep -n "ensureAdmin" backend/src/db/database.js
grep -n "FORCE_ADMIN_RESET" backend/src/db/database.js
